#!/usr/bin/env python3
"""InnoGames Monitoring Plugins - Jenkins Plugin security check

This scripts checks the Jenkins Plugins for security issues

Copyright (c) 2020 InnoGames GmbH
"""
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


import argparse
import requests
from sys import exit

SCRIPT = (
    'def warnings_monitor = new jenkins.security.UpdateSiteWarningsMonitor()\n'  # NOQA E501 Don't wrap because of groovy code
    'def plugin_vulnerabilities = warnings_monitor.getActivePluginWarningsByPlugin()\n'  # NOQA E501 Don't wrap because of groovy code
    'def critical_plugins = plugin_vulnerabilities.keySet()*.longName\n'
    'print(new groovy.json.JsonBuilder(critical_plugins))'
)


def main():
    """Print the response of a given endpoint in Nagios format.

    Fetch CSRF-Token if needed
    """

    args = parse_cmd_args()
    auth = (args.username, args.password)

    url = 'https://{}/scriptText'.format(args.host)

    # Fetch required token and cookies
    csrf, cookie_jar = fetch_token_and_cookies(args.host, auth)
    result = post_script_data(url, SCRIPT, csrf, auth, cookie_jar)

    print_and_exit(result)


def print_and_exit(result):
    if result.status_code != 200:
        print('Unknown - Request failed: {}'.format(result.text))
        exit(1)
    # TODO: proper error handling, catch if the result is 200 but not json
    plugin_list = result.json()
    if not plugin_list:
        print('OK - No Issues found')
        exit(0)
    else:
        print('Critical - Issues found for: {}'.format(', '.join(plugin_list)))
        exit(1)


def fetch_token_and_cookies(host, auth):
    """Fetch the required session values

    Returns both CSRF crumb and cookies since JSESSIONID is also needed
    """

    response = requests.get(
        'https://{}/crumbIssuer/api/xml?xpath='
        'concat(//crumbRequestField,":",//crumb)'.
        format(host), auth=auth
    )

    crumb = response.text.split(':')
    if len(crumb) != 2:
        raise KeyError("Wrong number of tokens for csrf response")

    return {crumb[0]: crumb[1]}, response.cookies


def post_script_data(url, script, headers, auth, cookies):
    """Send script data to a given endpoint

    :param url: url of the target
    :param script: script which will be sent within the request
    :param headers: needed headers for the post
    :param auth: authentication data

    :return: the response of the jenkins endpoint
    :rtype: Response
    """

    response = requests.post(
        url,
        auth=auth,
        data={'script': script},
        headers=headers,
        cookies=cookies
    )

    return response


def parse_cmd_args():
    parser = argparse.ArgumentParser(
        description='A small Nagios script to check for security '
                    'vulnerabilities in Jenkins Plugins'
    )
    parser.add_argument('host')
    parser.add_argument('username')
    parser.add_argument('password')

    return parser.parse_args()


if __name__ == '__main__':
    main()
